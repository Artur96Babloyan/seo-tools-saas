import jsPDF from 'jspdf';
import { SeoAnalysis } from './services';

interface PageSpeedReportData {
  id: string;
  analysis: SeoAnalysis;
  exportedAt: string;
}

export class PageSpeedPDFGenerator {
  private doc: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.doc.internal.pageSize.width;
    this.pageHeight = this.doc.internal.pageSize.height;
    this.margin = 20;
    this.currentY = this.margin;
  }

  public generateReport(reportData: PageSpeedReportData): void {
    const { analysis } = reportData;
    
    if (!analysis) {
      throw new Error('Analysis data is missing. Please run a new analysis.');
    }

    // Cover Page
    this.addCoverPage(analysis);
    
    // Executive Summary
    this.addNewPage();
    this.addExecutiveSummary(analysis);
    
    // Performance Scores
    this.addPerformanceScores(analysis);
    
    // Core Web Vitals
    this.addCoreWebVitals(analysis);
    
    // Resource Breakdown
    this.addResourceBreakdown(analysis);
    
    // Optimization Opportunities
    this.addOptimizationOpportunities(analysis);
    
    // Recommendations
    this.addRecommendations(analysis);
    
    // Report Summary
    this.addReportSummary();
  }

  private addCoverPage(analysis: SeoAnalysis): void {
    // Header with border
    this.doc.setFillColor(59, 130, 246);
    this.doc.rect(0, 0, this.pageWidth, 60, 'F');
    
    // Title
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('SEO TOOLS - PAGE SPEED REPORT', this.pageWidth / 2, 30, { align: 'center' });
    
    // Website URL
    this.doc.setFontSize(16);
    this.doc.text(analysis.url, this.pageWidth / 2, 45, { align: 'center' });
    
    // Main content
    this.currentY = 80;
    this.doc.setTextColor(31, 41, 55);
    
    // Website info
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Website: ${analysis.url}`, this.margin, this.currentY);
    this.currentY += 10;
    
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Generated: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}, ${new Date().toLocaleTimeString()}`, this.margin, this.currentY);
    this.currentY += 8;
    
    this.doc.text('Analysis Source: Google PageSpeed Insights API', this.margin, this.currentY);
    this.currentY += 20;
    
    // Performance Summary Box
    this.doc.setFillColor(249, 250, 251);
    this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 80, 'F');
    this.doc.setDrawColor(229, 231, 235);
    this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 80, 'S');
    
    this.currentY += 15;
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Performance Summary', this.pageWidth / 2, this.currentY, { align: 'center' });
    
    this.currentY += 20;
    
    // Status and scores
    const status = this.getOverallStatus(analysis.summary.averageScore);
    const statusColor = this.getStatusColor(status);
    
    this.doc.setFontSize(16);
    this.doc.setTextColor(...statusColor);
    this.doc.text(`Overall Status: ${status}`, this.pageWidth / 2, this.currentY, { align: 'center' });
    
    this.currentY += 12;
    this.doc.setFontSize(14);
    this.doc.setTextColor(31, 41, 55);
    this.doc.text(`Average Score: ${analysis.summary.averageScore}/100`, this.pageWidth / 2, this.currentY, { align: 'center' });
    
    this.currentY += 10;
    this.doc.text(`Total Issues: ${analysis.summary.totalIssues}`, this.pageWidth / 2, this.currentY, { align: 'center' });
    
    this.currentY += 10;
    this.doc.text(`Critical Issues: ${analysis.summary.criticalIssues}`, this.pageWidth / 2, this.currentY, { align: 'center' });
    
    // Footer
    this.doc.setFontSize(10);
    this.doc.setTextColor(107, 114, 128);
    this.doc.text('Generated by SEO Tools SaaS', this.pageWidth / 2, this.pageHeight - 20, { align: 'center' });
  }

  private addExecutiveSummary(analysis: SeoAnalysis): void {
    this.addSectionHeader('EXECUTIVE SUMMARY');
    
    this.currentY += 5;
    
    // Key findings
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Overall Status:', this.margin, this.currentY);
    
    const status = this.getOverallStatus(analysis.summary.averageScore);
    const statusColor = this.getStatusColor(status);
    
    this.doc.setTextColor(...statusColor);
    this.doc.text(status, this.margin + 35, this.currentY);
    
    this.currentY += 10;
    this.doc.setTextColor(31, 41, 55);
    this.doc.text(`Average Score: ${analysis.summary.averageScore}/100`, this.margin, this.currentY);
    this.currentY += 8;
    this.doc.text(`Total Issues: ${analysis.summary.totalIssues}`, this.margin, this.currentY);
    this.currentY += 8;
    this.doc.text(`Critical Issues: ${analysis.summary.criticalIssues}`, this.margin, this.currentY);
    this.currentY += 15;
  }

  private addPerformanceScores(analysis: SeoAnalysis): void {
    this.addSectionHeader('PERFORMANCE SCORES');
    
    this.currentY += 5;
    
    const categories = [
      { name: 'Performance', score: analysis.performance.score, description: this.getPerformanceDescription(analysis.performance.score) },
      { name: 'SEO', score: analysis.seo.score, description: this.getSeoDescription(analysis.seo.score) },
      { name: 'Accessibility', score: analysis.accessibility.score, description: this.getAccessibilityDescription(analysis.accessibility.score) },
      { name: 'Best Practices', score: analysis.bestPractices.score, description: this.getBestPracticesDescription(analysis.bestPractices.score) }
    ];
    
    categories.forEach((category) => {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(31, 41, 55);
      
      // Category name and score
      this.doc.text(`${category.name}: `, this.margin, this.currentY);
      
      // Visual bar
      const barWidth = 50;
      const barHeight = 4;
      const barX = this.margin + 40;
      const barY = this.currentY - 3;
      
      // Background bar
      this.doc.setFillColor(229, 231, 235);
      this.doc.rect(barX, barY, barWidth, barHeight, 'F');
      
      // Score bar
      const scoreWidth = (category.score / 100) * barWidth;
      this.doc.setFillColor(...this.getScoreColorRGB(category.score));
      this.doc.rect(barX, barY, scoreWidth, barHeight, 'F');
      
      // Score text
      const scoreEmoji = this.getScoreEmoji(category.score);
      this.doc.setTextColor(...this.getScoreColorRGB(category.score));
      this.doc.text(`${category.score}/100 ${scoreEmoji}`, barX + barWidth + 5, this.currentY);
      
      this.currentY += 8;
      
      // Description
      this.doc.setFontSize(10);
      this.doc.setTextColor(107, 114, 128);
      this.doc.text(category.description, this.margin + 5, this.currentY);
      
      this.currentY += 15;
    });
  }

  private addCoreWebVitals(analysis: SeoAnalysis): void {
    this.addSectionHeader('CORE WEB VITALS');
    
    this.currentY += 5;
    
    const vitals = [
      { name: 'Load Time', value: `${analysis.performance.loadTime} seconds`, icon: '[TIME]' },
      { name: 'First Contentful Paint', value: `${analysis.performance.firstContentfulPaint} seconds`, icon: '[PAINT]' },
      { name: 'Largest Contentful Paint', value: `${analysis.performance.largestContentfulPaint} seconds`, icon: '[LCP]' },
      { name: 'First Input Delay', value: `${analysis.performance.firstInputDelay} ms`, icon: '[FID]' },
      { name: 'Cumulative Layout Shift', value: `${analysis.performance.cumulativeLayoutShift}`, icon: '[CLS]' }
    ];
    
    vitals.forEach((vital) => {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(31, 41, 55);
      
      this.doc.text(`${vital.icon} ${vital.name}: ${vital.value}`, this.margin, this.currentY);
      this.currentY += 10;
    });
    
    this.currentY += 10;
  }

  private addResourceBreakdown(analysis: SeoAnalysis): void {
    this.addSectionHeader('RESOURCE BREAKDOWN');
    
    this.currentY += 5;
    
    const resources = [
      { name: 'Total Requests', value: analysis.resources.requests.toString(), icon: '[REQ]' },
      { name: 'Total Size', value: analysis.resources.totalSize, icon: '[SIZE]' },
      { name: 'Images', value: analysis.resources.images, icon: '[IMG]' },
      { name: 'Scripts', value: analysis.resources.scripts, icon: '[JS]' },
      { name: 'Styles', value: analysis.resources.styles, icon: '[CSS]' },
      { name: 'Fonts', value: analysis.resources.fonts, icon: '[FONT]' },
      { name: 'Other', value: analysis.resources.other, icon: '[OTHER]' }
    ];
    
    resources.forEach((resource) => {
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(31, 41, 55);
      
      this.doc.text(`${resource.icon} ${resource.name}: ${resource.value}`, this.margin, this.currentY);
      this.currentY += 10;
    });
    
    this.currentY += 10;
  }

  private addOptimizationOpportunities(analysis: SeoAnalysis): void {
    this.addSectionHeader('OPTIMIZATION OPPORTUNITIES');
    
    this.currentY += 5;
    
    if (analysis.opportunities.length === 0) {
      this.doc.setFontSize(12);
      this.doc.setTextColor(31, 41, 55);
      this.doc.text('No optimization opportunities identified.', this.margin, this.currentY);
      this.currentY += 15;
      return;
    }
    
    analysis.opportunities.forEach((opportunity, index) => {
      if (this.currentY > this.pageHeight - 60) {
        this.addNewPage();
      }
      
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(31, 41, 55);
      
      const impactColor = this.getImpactColor(opportunity.impact);
      this.doc.setTextColor(...impactColor);
      this.doc.text(`${index + 1}. [${opportunity.impact.toUpperCase()}] ${opportunity.title}`, this.margin, this.currentY);
      
      this.currentY += 10;
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(31, 41, 55);
      this.doc.text(`Impact: ${opportunity.impact.toUpperCase()}`, this.margin + 5, this.currentY);
      this.currentY += 6;
      this.doc.text(`Savings: ${opportunity.savings}`, this.margin + 5, this.currentY);
      this.currentY += 8;
      
      // Description
      const lines = this.doc.splitTextToSize(opportunity.description, this.pageWidth - 2 * this.margin - 10);
      lines.forEach((line: string) => {
        this.doc.text(line, this.margin + 5, this.currentY);
        this.currentY += 6;
      });
      
      this.currentY += 10;
    });
  }

  private addRecommendations(analysis: SeoAnalysis): void {
    this.addSectionHeader('RECOMMENDATIONS');
    
    this.currentY += 5;
    
    if (analysis.recommendations.length === 0) {
      this.doc.setFontSize(12);
      this.doc.setTextColor(31, 41, 55);
      this.doc.text('No specific recommendations available.', this.margin, this.currentY);
      this.currentY += 15;
      return;
    }
    
    analysis.recommendations.forEach((recommendation, index) => {
      if (this.currentY > this.pageHeight - 60) {
        this.addNewPage();
      }
      
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(31, 41, 55);
      
      const priorityColor = this.getPriorityColor(recommendation.priority);
      this.doc.setTextColor(...priorityColor);
      this.doc.text(`${index + 1}. [${recommendation.priority.toUpperCase()}] ${recommendation.title}`, this.margin, this.currentY);
      
      this.currentY += 10;
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(31, 41, 55);
      this.doc.text(`Priority: ${recommendation.priority.toUpperCase()}`, this.margin + 5, this.currentY);
      this.currentY += 6;
      this.doc.text(`Category: ${recommendation.category}`, this.margin + 5, this.currentY);
      this.currentY += 6;
      this.doc.text(`Impact: ${recommendation.impact.toUpperCase()}`, this.margin + 5, this.currentY);
      this.currentY += 8;
      
      // Description
      const lines = this.doc.splitTextToSize(recommendation.description, this.pageWidth - 2 * this.margin - 10);
      lines.forEach((line: string) => {
        this.doc.text(line, this.margin + 5, this.currentY);
        this.currentY += 6;
      });
      
      this.currentY += 10;
    });
  }

  private addReportSummary(): void {
    this.addSectionHeader('REPORT SUMMARY');
    
    this.currentY += 5;
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(31, 41, 55);
    this.doc.text('Key Takeaways:', this.margin, this.currentY);
    this.currentY += 10;
    
    const takeaways = [
      '• Focus on high-impact optimizations first',
      '• Monitor Core Web Vitals regularly',
      '• Test changes on both mobile and desktop',
      '• Prioritize user experience improvements'
    ];
    
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'normal');
    
    takeaways.forEach((takeaway) => {
      this.doc.text(takeaway, this.margin, this.currentY);
      this.currentY += 8;
    });
    
    this.currentY += 10;
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Next Steps:', this.margin, this.currentY);
    this.currentY += 10;
    
    const nextSteps = [
      '1. Address critical issues identified in this report',
      '2. Implement optimization opportunities',
      '3. Re-analyze after making changes',
      '4. Monitor performance metrics continuously'
    ];
    
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'normal');
    
    nextSteps.forEach((step) => {
      this.doc.text(step, this.margin, this.currentY);
      this.currentY += 8;
    });
    
    // Footer
    this.currentY += 20;
    this.doc.setFontSize(10);
    this.doc.setTextColor(107, 114, 128);
    this.doc.text('Generated by SEO Tools SaaS - Your comprehensive SEO analysis platform', this.margin, this.currentY);
    this.currentY += 8;
    this.doc.text(`Report ID: ${new Date().getFullYear()}-${(new Date().getMonth() + 1).toString().padStart(2, '0')}-${new Date().getDate().toString().padStart(2, '0')}-${new Date().getHours().toString().padStart(2, '0')}-${new Date().getMinutes().toString().padStart(2, '0')}-${new Date().getSeconds().toString().padStart(2, '0')}-${Math.random().toString(36).substring(2, 15)}`, this.margin, this.currentY);
  }

  private addSectionHeader(title: string): void {
    if (this.currentY > this.pageHeight - 60) {
      this.addNewPage();
    }
    
    this.doc.setFillColor(59, 130, 246);
    this.doc.rect(this.margin, this.currentY - 5, this.pageWidth - 2 * this.margin, 12, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`[${title}]`, this.pageWidth / 2, this.currentY + 3, { align: 'center' });
    
    this.currentY += 20;
    this.doc.setTextColor(31, 41, 55);
  }

  private addNewPage(): void {
    this.doc.addPage();
    this.currentY = this.margin;
  }

  private getOverallStatus(score: number): string {
    if (score >= 90) return 'EXCELLENT';
    if (score >= 70) return 'GOOD';
    if (score >= 50) return 'NEEDS IMPROVEMENT';
    return 'POOR';
  }

  private getStatusColor(status: string): [number, number, number] {
    switch (status) {
      case 'EXCELLENT': return [5, 150, 105]; // Green
      case 'GOOD': return [217, 119, 6]; // Amber
      case 'NEEDS IMPROVEMENT': return [234, 88, 12]; // Orange
      case 'POOR': return [220, 38, 38]; // Red
      default: return [107, 114, 128]; // Gray
    }
  }

  private getScoreColorRGB(score: number): [number, number, number] {
    if (score >= 90) return [5, 150, 105]; // Green-600
    if (score >= 70) return [217, 119, 6]; // Amber-600
    if (score >= 50) return [234, 88, 12]; // Orange-600
    return [220, 38, 38]; // Red-600
  }

  private getScoreEmoji(score: number): string {
    if (score >= 90) return '[EXCELLENT]';
    if (score >= 70) return '[GOOD]';
    if (score >= 50) return '[NEEDS IMPROVEMENT]';
    return '[POOR]';
  }

  private getImpactColor(impact: string): [number, number, number] {
    switch (impact.toLowerCase()) {
      case 'high': return [220, 38, 38]; // Red
      case 'medium': return [234, 88, 12]; // Orange
      case 'low': return [5, 150, 105]; // Green
      default: return [107, 114, 128]; // Gray
    }
  }

  private getPriorityColor(priority: string): [number, number, number] {
    switch (priority.toLowerCase()) {
      case 'high': return [220, 38, 38]; // Red
      case 'medium': return [234, 88, 12]; // Orange
      case 'low': return [5, 150, 105]; // Green
      default: return [107, 114, 128]; // Gray
    }
  }

  private getPerformanceDescription(score: number): string {
    if (score >= 90) return 'Excellent performance! Your site loads quickly and provides great user experience.';
    if (score >= 70) return 'Good performance with room for improvement. Consider optimizing images and scripts.';
    if (score >= 50) return 'Performance needs improvement. Focus on reducing load times and optimizing resources.';
    return 'Poor performance detected. Immediate optimization required for better user experience.';
  }

  private getSeoDescription(score: number): string {
    if (score >= 90) return 'Great SEO optimization! Your site is well-structured for search engines.';
    if (score >= 70) return 'Good SEO foundation with some areas to improve for better search visibility.';
    if (score >= 50) return 'SEO needs attention. Focus on meta tags, headings, and content structure.';
    return 'SEO requires significant improvement. Consider professional SEO audit and optimization.';
  }

  private getAccessibilityDescription(score: number): string {
    if (score >= 90) return 'Excellent accessibility! Your site is inclusive and user-friendly for all visitors.';
    if (score >= 70) return 'Good accessibility with some improvements needed for better inclusivity.';
    if (score >= 50) return 'Accessibility improvements needed. Consider adding alt text and ARIA labels.';
    return 'Accessibility requires significant attention. Focus on making your site inclusive for all users.';
  }

  private getBestPracticesDescription(score: number): string {
    if (score >= 90) return 'Following web development best practices perfectly!';
    if (score >= 70) return 'Good adherence to best practices with minor improvements needed.';
    if (score >= 50) return 'Some best practices need attention. Review security and modern web standards.';
    return 'Best practices need significant improvement. Consider updating security and coding standards.';
  }

  public download(filename: string): void {
    this.doc.save(filename);
  }
}

export function generatePageSpeedPDF(reportData: PageSpeedReportData): void {
  try {
    const generator = new PageSpeedPDFGenerator();
    generator.generateReport(reportData);
    
    // Extract domain from URL for filename
    const url = new URL(reportData.analysis.url);
    const domain = url.hostname.replace(/^www\./, '');
    const dateStr = new Date().toISOString().split('T')[0];
    const filename = `page-speed-report-${domain}-${dateStr}.pdf`;
    
    generator.download(filename);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error(`Failed to generate PDF report: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
} 